Implement the unique names method. When passes two arrays of names, it will return an array containing the names taht appear in either or 
both arrays. The returned array should have no duplicates.

For Example, calling Merge Names.uniqueNames(new String[] {'Ava', 'Emma', 'Olivia'}, new String[] {'Olivia','Sophia','Emma'}) should return 
an array containing Ava, Emma, Olivia, and Sophia in any order

public class Solution {
 public static void main(String[] args) {
  String[] names1 = new String[] {"Ava", "Emma", "Olivia"};
	        String[] names2 = new String[] {"Olivia", "Sophia", "Emma"};
	        System.out.println(String.join(", ", uniqueNames(names1, names2))); // should print Ava, Emma, Olivia, Sophia
            }
            
public String[] uniqueNames(String[] names1, String[] names2) {
	     List<String> names1List =new ArrayList<String>(names1.length);
	     Collections.addAll( names1List, names1 );
	     List<String> names2List =new ArrayList<String>(names2.length);
	     Collections.addAll( names2List, names2 );
		 List<String> allItems = new ArrayList<>();
	     for( String s : names1List ) {
	    	 allItems.add(s);
	     }
	     for(String s1 : names2List) {
	    	 allItems.add(s1);
	     }
	     Set<String> set = new TreeSet<>(); 
	     	for(String s3 : allItems) {
	     		set.add(s3);
	     	}
	    String[] uniqueItemsArray =  set.toArray(new String[set.size()]);  
	    return uniqueItemsArray;
	    }
